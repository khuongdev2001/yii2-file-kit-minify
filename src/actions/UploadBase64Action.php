<?php

namespace fileKitMinify\actions;

use Yii;
use yii\base\DynamicModel;
use yii\base\InvalidConfigException;
use yii\helpers\Html;
use yii\helpers\Url;
use yii\web\BadRequestHttpException;
use yii\web\UploadedFile;

class UploadBase64Action extends UploadActionFlySystem
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @throws InvalidConfigException
     * @throws BadRequestHttpException
     */
    public function run()
    {
        $result = [];
        $data = Yii::$app->request->post("data");
        if (empty($data)) {
            throw new BadRequestHttpException("field data not found");
        }
        $image_parts = explode(";base64,", $data);
        $image_type_aux = explode("image/", $image_parts[0]);
        $image_type = $image_type_aux[1];
        $image_base64 = base64_decode($image_parts[1]);
        $pathTemp = "file-kit-temp";
        $filename = uniqid() . "." . $image_type;
        if (!is_dir($pathTemp)) {
            // dir doesn't exist, make it
            mkdir($pathTemp);
        }
        file_put_contents($pathTemp . DIRECTORY_SEPARATOR . $filename, $image_base64,FILE_USE_INCLUDE_PATH);
        $path = Yii::$app->get($this->fileStorage)->savePathFile($pathTemp . DIRECTORY_SEPARATOR . $filename, $this->uploadPath);
        if ($path) {
            $output = [
                $this->responseNameParam => Html::encode($filename),
                $this->responseMimeTypeParam => $image_type,
                $this->responseSizeParam => strlen($image_base64),
                $this->responseBaseUrlParam => Yii::$app->get($this->fileStorage)->baseUrl
            ];
            $output[$this->responsePathParam] = $path;
            $output[$this->responseUrlParam] = Yii::$app->get($this->fileStorage)->baseUrl . DIRECTORY_SEPARATOR . $path;
            $output[$this->responseDeleteUrlParam] = Url::to([$this->deleteRoute, 'path' => $path]);
        } else {
            $output['error'] = true;
            $output['errors'] = [];
        }
        $result['files'][] = $output;
        rmdir($pathTemp);
        return $this->multiple ? $result : array_shift($result);
    }
}
